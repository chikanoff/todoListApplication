plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'checkstyle'
}

group = 'com.intransition.chikanoff'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	mysqlVersion = '8.0.25'
	springSecurityVersion = "5.5.2"
	javaxValidationVersion = "2.0.1.Final"
	springBootVersion = "2.5.6"
	checkStyleVersion = '9.1'
	jwtVersion = "0.9.1"
	mockitoVersion = '4.1.0'
	testContainersVersion = '2.0.18'
	mapstructVersion = '1.4.2.Final'
}

dependencies {
	implementation 'org.liquibase:liquibase-core'
	implementation "org.springframework.boot:spring-boot-starter:$springBootVersion"
	implementation project(":auth-spring-boot-starter")
	implementation "org.springframework.security:spring-security-core:$springSecurityVersion"
	implementation "org.springframework.security:spring-security-web:$springSecurityVersion"
	implementation "javax.validation:validation-api:$javaxValidationVersion"
	implementation "org.springframework.security:spring-security-config:$springSecurityVersion"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "io.jsonwebtoken:jjwt:$jwtVersion"
	implementation "org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"
	implementation "org.mapstruct:mapstruct:$mapstructVersion"
	annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation "mysql:mysql-connector-java:$mysqlVersion"

	testImplementation "org.projectlombok:lombok"
	testAnnotationProcessor "org.projectlombok:lombok"
	testImplementation "org.liquibase:liquibase-core"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.cloud:spring-cloud-starter-bootstrap:3.0.4"
	testImplementation "com.playtika.testcontainers:embedded-mysql:${testContainersVersion}"
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
}

test {
	useJUnitPlatform()
}

def qualityExcludeList = [
		'**/beans/**',
		'**/exceptions/**',
		'**/payloads/**'
]

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: qualityExcludeList)
		}))
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: qualityExcludeList)
		}))
	}

	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.9
			}
		}
		rule {
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification

checkstyle {
	toolVersion = checkStyleVersion
}
